package com.roadioapp.roadioappuser;

import android.Manifest;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.IntentFilter;
import android.content.pm.PackageManager;
import android.content.res.Resources;
import android.graphics.Color;
import android.graphics.Point;
import android.graphics.drawable.AnimatedVectorDrawable;
import android.location.Address;
import android.location.Geocoder;
import android.location.Location;
import android.location.LocationManager;
import android.os.Build;
import android.os.Bundle;
import android.os.Handler;
import android.os.SystemClock;
import android.provider.Settings;
import android.support.annotation.NonNull;
import android.support.annotation.Nullable;
import android.support.v4.view.GravityCompat;
import android.support.v4.widget.DrawerLayout;
import android.support.v7.app.AlertDialog;
import android.support.v7.app.AppCompatActivity;
import android.text.Editable;
import android.text.TextWatcher;
import android.transition.TransitionManager;
import android.util.Log;
import android.view.Gravity;
import android.view.MotionEvent;
import android.view.View;
import android.view.ViewGroup;
import android.view.animation.Interpolator;
import android.view.animation.LinearInterpolator;
import android.view.inputmethod.InputMethodManager;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.ListView;
import android.widget.RelativeLayout;
import android.widget.TextView;
import android.widget.Toast;

import com.android.volley.DefaultRetryPolicy;
import com.android.volley.Request;
import com.android.volley.RequestQueue;
import com.android.volley.Response;
import com.android.volley.VolleyError;
import com.android.volley.toolbox.StringRequest;
import com.android.volley.toolbox.Volley;
import com.google.android.gms.common.ConnectionResult;
import com.google.android.gms.common.GooglePlayServicesNotAvailableException;
import com.google.android.gms.common.GooglePlayServicesRepairableException;
import com.google.android.gms.common.api.GoogleApiClient;
import com.google.android.gms.common.api.PendingResult;
import com.google.android.gms.common.api.ResultCallback;
import com.google.android.gms.common.api.Status;
import com.google.android.gms.location.LocationServices;
import com.google.android.gms.location.places.AutocompleteFilter;
import com.google.android.gms.location.places.Place;
import com.google.android.gms.location.places.PlaceBuffer;
import com.google.android.gms.location.places.PlaceFilter;
import com.google.android.gms.location.places.PlaceLikelihood;
import com.google.android.gms.location.places.PlaceLikelihoodBuffer;
import com.google.android.gms.location.places.Places;
import com.google.android.gms.location.places.ui.PlaceAutocomplete;
import com.google.android.gms.maps.CameraUpdate;
import com.google.android.gms.maps.CameraUpdateFactory;
import com.google.android.gms.maps.GoogleMap;
import com.google.android.gms.maps.MapFragment;
import com.google.android.gms.maps.OnMapReadyCallback;
import com.google.android.gms.maps.Projection;
import com.google.android.gms.maps.model.BitmapDescriptorFactory;
import com.google.android.gms.maps.model.LatLng;
import com.google.android.gms.maps.model.LatLngBounds;
import com.google.android.gms.maps.model.MapStyleOptions;
import com.google.android.gms.maps.model.Marker;
import com.google.android.gms.maps.model.MarkerOptions;
import com.google.android.gms.maps.model.Polyline;
import com.google.android.gms.maps.model.PolylineOptions;
import com.google.firebase.database.DataSnapshot;
import com.google.firebase.database.DatabaseError;
import com.google.firebase.database.DatabaseReference;
import com.google.firebase.database.FirebaseDatabase;
import com.google.firebase.database.ValueEventListener;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import java.util.Locale;

public class MapActivity extends AppCompatActivity implements
        OnMapReadyCallback, View.OnClickListener, View.OnTouchListener, GoogleApiClient.ConnectionCallbacks, GoogleApiClient.OnConnectionFailedListener {

    private GoogleApiClient mGoogleApiClient;
    private GoogleMap mMap;
    MapFragment mapFragment;
    LatLng karachi;
    final private int PERM_REQUEST_LOCATION = 100;
    private boolean mLocationPermissionGranted;
    private Location mLastKnownLocation;
    private LocationManager locationManager;
    private BroadcastReceiver broadcastReceiver;

    LinearLayout selBike, selCar, selVan, selTruck, activeBtn;

    boolean drawerState = false, cameraMove = false, serviceStart = false, pickLocation = false, autoCMCheck = false;
    DrawerLayout drawer_layout;

    ImageView navMenuIcon, pickLocClearBtn, desLocClearBtn, curPlaceSetS;
    RelativeLayout mainActCon;
    LinearLayout sendBtn, getARideBtn, selTypeCon, curLocCont, setCurLocBtn, bottomBtnCon;
    TextView sendBtnText, getARideBtnText, pickLocCurTV, pickLocDesTV;

    private double curLat = 0, curLng = 0;
    RequestQueue geocodingAPIReq, directionAPIReq;

    final private int PLACE_AUTOCOMPLETE_CURRENT_REQUEST_CODE = 5;
    final private int PLACE_AUTOCOMPLETE_DESTINATION_REQUEST_CODE = 6;

    //Storage Variables
    final String pickLocHint = "Pick location?";
    final String desLocHint = "Destination location?";
    String curLocation="", pickCurLocation="", pickDesLocation="";
    Marker pickLocMarker, desLocMarker;
    LatLng curLocLL;
    boolean firstCamMov = true;
    private List<Polyline> polylinePaths = new ArrayList<>();

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        if (!permissionCheck()) {
            setPermission();
        }else{
            clientConnect();
        }

        /*FirebaseDatabase database = FirebaseDatabase.getInstance();
        DatabaseReference myRef = database.getReference("users");

        myRef.addValueEventListener(new ValueEventListener() {
            @Override
            public void onDataChange(DataSnapshot dataSnapshot) {
                Log.e("GetValues", "Value is: " + dataSnapshot.getValue());
            }

            @Override
            public void onCancelled(DatabaseError databaseError) {
                Log.e("DBListningErr", "Failed to read value.", databaseError.toException());
            }
        });*/

        navMenuIcon = (ImageView) findViewById(R.id.navMenuIcon);
        navMenuIcon.setOnClickListener(this);

        drawer_layout = (DrawerLayout) findViewById(R.id.drawer_layout);
        drawer_layout.addDrawerListener(new DrawerLayout.DrawerListener() {
            @Override
            public void onDrawerSlide(View drawerView, float slideOffset) {

            }

            @Override
            public void onDrawerOpened(View drawerView) {
                drawerState = true;
            }

            @Override
            public void onDrawerClosed(View drawerView) {
                drawerState = false;
            }

            @Override
            public void onDrawerStateChanged(int newState) {
                /*if (newState == DrawerLayout.STATE_SETTLING) {
                    if (drawerState) {
                        menuCloseBtn();
                    } else {
                        menuOpenBtn();
                    }
                }
                if (newState == DrawerLayout.STATE_IDLE) {
                    if (drawer_layout.isDrawerOpen(GravityCompat.START)) {
                        if (!drawerState) {
                            menuOpenBtn();
                        }
                    } else {
                        if (drawerState) {
                            menuCloseBtn();
                        }
                    }
                }*/
            }
        });

        mainActCon = (RelativeLayout) findViewById(R.id.mainActCon);

        sendBtn = (LinearLayout) findViewById(R.id.sendBtn);
        sendBtnText = (TextView) sendBtn.getChildAt(0);
        sendBtn.setOnTouchListener(this);

        getARideBtn = (LinearLayout) findViewById(R.id.getARideBtn);
        getARideBtnText = (TextView) getARideBtn.getChildAt(0);
        getARideBtn.setOnTouchListener(this);

        selTypeCon = (LinearLayout) findViewById(R.id.selTypeCon);
        curLocCont = (LinearLayout) findViewById(R.id.curLocCont);

        setCurLocBtn = (LinearLayout) findViewById(R.id.setCurLocBtn);
        setCurLocBtn.setOnClickListener(this);

        pickLocClearBtn = (ImageView) findViewById(R.id.pickLocClearBtn);
        pickLocClearBtn.setOnClickListener(this);

        desLocClearBtn = (ImageView) findViewById(R.id.desLocClearBtn);
        desLocClearBtn.setOnClickListener(this);

        pickLocCurTV = (TextView) findViewById(R.id.pickLocCurTV);
        pickLocCurTV.setOnClickListener(this);
        pickLocCurTV.addTextChangedListener(new TextWatcher() {
            @Override
            public void beforeTextChanged(CharSequence s, int start, int count, int after) {

            }

            @Override
            public void onTextChanged(CharSequence s, int start, int before, int count) {
                if(!s.toString().equals(pickLocHint)){
                    pickLocClearBtn.setVisibility(View.VISIBLE);
                }else{
                    pickLocClearBtn.setVisibility(View.GONE);
                }
            }

            @Override
            public void afterTextChanged(Editable s) {

            }
        });

        pickLocDesTV = (TextView) findViewById(R.id.pickLocDesTV);
        pickLocDesTV.setOnClickListener(this);
        pickLocDesTV.addTextChangedListener(new TextWatcher() {
            @Override
            public void beforeTextChanged(CharSequence s, int start, int count, int after) {

            }

            @Override
            public void onTextChanged(CharSequence s, int start, int before, int count) {
                if(!s.toString().equals(desLocHint)){
                    desLocClearBtn.setVisibility(View.VISIBLE);
                }else{
                    desLocClearBtn.setVisibility(View.GONE);
                }
            }

            @Override
            public void afterTextChanged(Editable s) {

            }
        });

        curPlaceSetS = (ImageView) findViewById(R.id.curPlaceSetS);
        curPlaceSetS.setOnClickListener(this);

        bottomBtnCon = (LinearLayout) findViewById(R.id.bottomBtnCon);

        geocodingAPIReq = Volley.newRequestQueue(this);
        directionAPIReq = Volley.newRequestQueue(this);

    }

    private void clientConnect(){
        mGoogleApiClient = new GoogleApiClient.Builder(this)
                .addApi(LocationServices.API)
                .addApi(Places.GEO_DATA_API)
                .addApi(Places.PLACE_DETECTION_API)
                .addConnectionCallbacks(this)
                .addOnConnectionFailedListener(this)
                .build();
        mGoogleApiClient.connect();
    }

    @Override
    protected void onResume() {
        super.onResume();
        startTrackLoc();
        if(broadcastReceiver == null){
            broadcastReceiver = new BroadcastReceiver() {
                @Override
                public void onReceive(Context context, Intent intent) {
                    if(mMap != null && !mMap.isMyLocationEnabled()){
                        getDeviceLocation(true);
                    }
                    showCurrentPlace((double) intent.getExtras().get("Lat"), (double) intent.getExtras().get("Lng"));
                    //Log.e("LocationUpadte", intent.getExtras().get("Coordinates")+"");
                }
            };
        }
        registerReceiver(broadcastReceiver, new IntentFilter("location_update"));
    }

    @Override
    protected void onDestroy() {
        super.onDestroy();
        Log.e("AppStatus", "App Terminated");
        if(broadcastReceiver != null){
            unregisterReceiver(broadcastReceiver);
        }
        stopTrackLoc();
    }

    public void startTrackLoc() {
        if (permissionCheck()) {
            if (isGPSEnabled()) {
                if (!serviceStart) {
                    Intent i = new Intent(getApplicationContext(), GPS_Service.class);
                    startService(i);
                    serviceStart = true;
                }
            } else {
                serviceStart = false;
                enableGPS();
            }
        }
    }

    public void stopTrackLoc(){
        Intent i = new Intent(getApplicationContext(), GPS_Service.class);
        stopService(i);
        serviceStart = false;
    }


    @Override
    public void onMapReady(GoogleMap googleMap) {
        mMap = googleMap;

        try {
            boolean success = googleMap.setMapStyle(
                    MapStyleOptions.loadRawResourceStyle(
                            this, R.raw.style_json));

            if (!success) {
                Log.e("MapTag", "Style parsing failed.");
            }
        } catch (Resources.NotFoundException e) {
            Log.e("MapTag", "Can't find style. Error: ", e);
        }

        karachi = new LatLng(24.861462, 67.009939);
        mMap.moveCamera(CameraUpdateFactory.newLatLngZoom(karachi, 10));

        mMap.setOnCameraMoveStartedListener(new GoogleMap.OnCameraMoveStartedListener() {
            @Override
            public void onCameraMoveStarted(int reason) {
                cameraMove = true;
                parcelTypeConAnim();
            }
        });

        mMap.setOnCameraIdleListener(new GoogleMap.OnCameraIdleListener() {
            @Override
            public void onCameraIdle() {
                cameraMove = false;
                parcelTypeConAnim();
            }
        });

        mMap.setOnMarkerClickListener(new GoogleMap.OnMarkerClickListener() {
            @Override
            public boolean onMarkerClick(Marker marker) {
                return true;
            }
        });

        LatLng latLng1 = new LatLng(24.911621, 67.125808);
        LatLng latLng2 = new LatLng(24.911480, 67.125140);
        LatLng latLng3 = new LatLng(24.907902, 67.123127);
        LatLng latLng4 = new LatLng(24.906754, 67.117880);

        mMap.addMarker(new MarkerOptions().position(latLng1).icon(BitmapDescriptorFactory.fromResource(R.drawable.top_van)).flat(true).rotation(90.0f));
        mMap.addMarker(new MarkerOptions().position(latLng2).icon(BitmapDescriptorFactory.fromResource(R.drawable.top_bike)).flat(true).rotation(270.0f));
        mMap.addMarker(new MarkerOptions().position(latLng3).icon(BitmapDescriptorFactory.fromResource(R.drawable.top_truck)).flat(true).rotation(285.0f));
        mMap.addMarker(new MarkerOptions().position(latLng4).icon(BitmapDescriptorFactory.fromResource(R.drawable.top_car)).flat(true).rotation(285.0f));

        startTrackLoc();
        updateLocationUI();
        getDeviceLocation(false);

    }

    private void updateLocationUI() {
        if (mMap == null) {
            return;
        }
        if (permissionCheck()) {
            mLocationPermissionGranted = true;
        } else {
            setPermission();
        }

        if (mLocationPermissionGranted) {
            mMap.setMyLocationEnabled(true);
            mMap.getUiSettings().setMyLocationButtonEnabled(false);
        } else {
            mMap.setMyLocationEnabled(false);
            mMap.getUiSettings().setMyLocationButtonEnabled(false);
            mLastKnownLocation = null;
        }
    }

    private void getDeviceLocation(final boolean zoom) {

        if (mLocationPermissionGranted) {
            if(isGPSEnabled()){
                mLastKnownLocation = LocationServices.FusedLocationApi
                        .getLastLocation(mGoogleApiClient);
                if(mLastKnownLocation != null){
                    if(!mMap.isMyLocationEnabled()){
                        mMap.setMyLocationEnabled(true);
                    }else{
                        showCurrentPlace(mLastKnownLocation.getLatitude(), mLastKnownLocation.getLongitude());
                    }
                    if(zoom){
                        mMap.animateCamera(CameraUpdateFactory.newLatLngZoom(
                                new LatLng(mLastKnownLocation.getLatitude(),
                                        mLastKnownLocation.getLongitude()), 15.0f));
                    }else{
                        mMap.moveCamera(CameraUpdateFactory.newLatLngZoom(
                                new LatLng(mLastKnownLocation.getLatitude(),
                                        mLastKnownLocation.getLongitude()), 15.0f));
                    }
                }else{
                    mMap.setMyLocationEnabled(false);
                    mMap.animateCamera(CameraUpdateFactory.newLatLngZoom(karachi, 10));
                }
            }else{
                enableGPS();
            }
        }else{
            setPermission();
        }

    }

    private void showCurrentPlace(final double curLat, final double curLng) {
        if (mMap == null) {
            return;
        }

        if (mLocationPermissionGranted) {
            if(!pickLocation){
                pickLocation = true;
                //Log.e("requestIsGoing", "Going");
                String url = "https://maps.googleapis.com/maps/api/geocode/json?latlng="+curLat+","+curLng+"&sensor=false&key="+getResources().getString(R.string.google_url_key);
                StringRequest stringReqData = new StringRequest(Request.Method.GET, url, new Response.Listener<String>() {
                    @Override
                    public void onResponse(String userDataResponse) {
                        pickLocation = false;
                        //Log.e("ReqLoc",userDataResponse);
                        try {
                            JSONObject rData = new JSONObject(userDataResponse);
                            String status = rData.getString("status");
                            JSONArray results = rData.getJSONArray("results");
                            if(status.equals("OK")){
                                JSONObject getSingleData = results.getJSONObject(0);
                                JSONArray addressComponents = getSingleData.getJSONArray("address_components");
                                JSONObject firstAddName = addressComponents.getJSONObject(0);
                                String newLoc = firstAddName.getString("long_name");
                                curLocLL = new LatLng(curLat, curLng);
                                pickCurLocation = curLocation;
                                if(firstCamMov){
                                    setTVCurLoc(newLoc, curLocLL, true);
                                    firstCamMov = false;
                                }else if(!curLocation.equals(newLoc)){
                                    setTVCurLoc(newLoc, curLocLL, true);
                                }
                                curLocation = newLoc;
                            }else{
                                Toast.makeText(MapActivity.this, status, Toast.LENGTH_SHORT).show();
                            }

                        } catch (JSONException e) {
                            e.printStackTrace();
                        }
                    }
                }, new Response.ErrorListener() {
                    @Override
                    public void onErrorResponse(VolleyError error) {
                        pickLocation = false;
                        Log.e("ReqErr", String.valueOf(error));
                    }
                });
                stringReqData.setRetryPolicy(new DefaultRetryPolicy(2000, DefaultRetryPolicy.DEFAULT_MAX_RETRIES, DefaultRetryPolicy.DEFAULT_BACKOFF_MULT));
                geocodingAPIReq.add(stringReqData);
            }
        } else {
            setPermission();
        }
    }

    private void showDirection(){
        resetDirection();
        if(pickLocMarker != null && desLocMarker != null){
            String origin = (pickLocMarker.getPosition()).latitude+","+(pickLocMarker.getPosition()).longitude;
            String destination = (desLocMarker.getPosition()).latitude+","+(desLocMarker.getPosition()).longitude;
            String url = "https://maps.googleapis.com/maps/api/directions/json?origin=" + origin + "&destination=" + destination + "&key=" + getResources().getString(R.string.google_url_key);
            StringRequest stringReqData = new StringRequest(Request.Method.GET, url, new Response.Listener<String>() {
                @Override
                public void onResponse(String userDataResponse) {
                    //Log.e("ReqLoc",userDataResponse);
                    try {
                        JSONObject rData = new JSONObject(userDataResponse);
                        String status = rData.getString("status");

                        if(status.equals("OK")){
                            JSONArray routes = rData.getJSONArray("routes");
                            JSONObject subRoutes = routes.getJSONObject(0);
                            JSONObject overview_polyline = subRoutes.getJSONObject("overview_polyline");
                            List<LatLng> points = decodePolyLine(overview_polyline.getString("points"));
                            PolylineOptions polylineOptions = new PolylineOptions().
                                    geodesic(true).
                                    color(Color.RED).
                                    width(10);
                            for (int i = 0; i < points.size(); i++){
                                polylineOptions.add(points.get(i));
                            }

                            polylinePaths.add(mMap.addPolyline(polylineOptions));

                        }else{
                            Toast.makeText(MapActivity.this, status, Toast.LENGTH_SHORT).show();
                        }

                    } catch (JSONException e) {
                        e.printStackTrace();
                    }
                }
            }, new Response.ErrorListener() {
                @Override
                public void onErrorResponse(VolleyError error) {
                    Log.e("ReqErr", String.valueOf(error));
                }
            });
            stringReqData.setRetryPolicy(new DefaultRetryPolicy(2000, DefaultRetryPolicy.DEFAULT_MAX_RETRIES, DefaultRetryPolicy.DEFAULT_BACKOFF_MULT));
            directionAPIReq.add(stringReqData);
        }
    }

    private void resetDirection(){
        if(polylinePaths != null){
            for (Polyline polyline:polylinePaths ) {
                polyline.remove();
            }
        }
    }

    private List<LatLng> decodePolyLine(final String poly) {
        int len = poly.length();
        int index = 0;
        List<LatLng> decoded = new ArrayList<LatLng>();
        int lat = 0;
        int lng = 0;

        while (index < len) {
            int b;
            int shift = 0;
            int result = 0;
            do {
                b = poly.charAt(index++) - 63;
                result |= (b & 0x1f) << shift;
                shift += 5;
            } while (b >= 0x20);
            int dlat = ((result & 1) != 0 ? ~(result >> 1) : (result >> 1));
            lat += dlat;

            shift = 0;
            result = 0;
            do {
                b = poly.charAt(index++) - 63;
                result |= (b & 0x1f) << shift;
                shift += 5;
            } while (b >= 0x20);
            int dlng = ((result & 1) != 0 ? ~(result >> 1) : (result >> 1));
            lng += dlng;

            decoded.add(new LatLng(
                    lat / 100000d, lng / 100000d
            ));
        }

        return decoded;
    }

    private boolean isGPSEnabled(){
        if(locationManager == null){
            locationManager = (LocationManager) getSystemService(LOCATION_SERVICE);
        }
        return locationManager.isProviderEnabled(LocationManager.GPS_PROVIDER);
    }

    private void enableGPS(){
        Intent sett_i = new Intent(Settings.ACTION_LOCATION_SOURCE_SETTINGS);
        sett_i.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
        startActivity(sett_i);
    }

    @Override
    public void onClick(View v) {
        int getId = v.getId();
        switch (getId) {
            case R.id.navMenuIcon:
                if (drawerState) {
                    drawer_layout.closeDrawer(Gravity.START);
                } else {
                    drawer_layout.openDrawer(Gravity.START);
                }
                break;
            case R.id.setCurLocBtn:
                if(!setMapCameraBound()){
                    getDeviceLocation(true);
                }
                //showCurrentPlace();
                break;
            case R.id.pickLocCurTV:
                placeAutoCompleteFrag(PLACE_AUTOCOMPLETE_CURRENT_REQUEST_CODE);
                break;
            case R.id.pickLocDesTV:
                placeAutoCompleteFrag(PLACE_AUTOCOMPLETE_DESTINATION_REQUEST_CODE);
                break;
            case R.id.pickLocClearBtn:
                resetTVCurLoc();
                break;
            case R.id.desLocClearBtn:
                resetTVDesLoc();
                break;
            case R.id.curPlaceSetS:
                if(!curLocation.isEmpty()){
                    resetTVCurLoc();
                    setTVCurLoc(curLocation, curLocLL, true);
                }
                break;
            default:
                break;
        }
    }

    private void placeAutoCompleteFrag(int requestCode){
        Intent des_intent = null;
        try {
            AutocompleteFilter typeFilter = new AutocompleteFilter.Builder()
                    .setCountry("PK")
                    .build();
            des_intent = new PlaceAutocomplete.IntentBuilder(PlaceAutocomplete.MODE_OVERLAY).setFilter(typeFilter).build(this);
        } catch (GooglePlayServicesRepairableException e) {
            e.printStackTrace();
        } catch (GooglePlayServicesNotAvailableException e) {
            e.printStackTrace();
        }
        startActivityForResult(des_intent, requestCode);
    }

    private boolean setMapCameraBound(){
        if(pickLocMarker != null && desLocMarker != null){
            LatLngBounds.Builder builder = new LatLngBounds.Builder();
            builder.include(pickLocMarker.getPosition());
            builder.include(desLocMarker.getPosition());
            LatLngBounds bounds = builder.build();
            mMap.animateCamera(CameraUpdateFactory.newLatLngBounds(bounds, 500, 500, 100));
            return true;
        }
        return false;
    }

    private void resetMapCameraBound(){
        if(pickLocMarker != null){
            mMap.animateCamera(CameraUpdateFactory.newLatLngZoom(pickLocMarker.getPosition(), 15.0f));
        }else if(desLocMarker != null){
            mMap.animateCamera(CameraUpdateFactory.newLatLngZoom(desLocMarker.getPosition(), 15.0f));
        }else if(curLocLL != null){
            mMap.animateCamera(CameraUpdateFactory.newLatLngZoom(curLocLL, 15.0f));
        }
        resetDirection();
    }

    private void setTVCurLoc(String placeName, LatLng placeLL, boolean move){
        pickLocCurTV.setText(placeName);
        pickLocCurTV.setTextColor(Color.parseColor("#333333"));
        if(pickLocMarker != null){
            pickLocMarker.setPosition(placeLL);
        }else{
            pickLocMarker = mMap.addMarker(new MarkerOptions().position(placeLL));
            pickLocMarker.setZIndex(99.0f);
        }
        if(move){
            if(!setMapCameraBound()){
                mMap.animateCamera(CameraUpdateFactory.newLatLngZoom(placeLL, 15.0f));
            }
        }
        showDirection();
    }

    private void setTVDesLoc(String placeName, LatLng placeLL){
        pickLocDesTV.setText(placeName);
        pickLocDesTV.setTextColor(Color.parseColor("#333333"));
        if(desLocMarker != null){
            desLocMarker.setPosition(placeLL);
        }else{
            desLocMarker = mMap.addMarker(new MarkerOptions().position(placeLL));
            desLocMarker.setZIndex(99.0f);
        }
        if(!setMapCameraBound()){
            mMap.animateCamera(CameraUpdateFactory.newLatLngZoom(placeLL, 15.0f));
        }
        showDirection();
    }

    private void resetTVCurLoc(){
        pickLocCurTV.setText(pickLocHint);
        pickLocCurTV.setTextColor(Color.parseColor("#66000000"));
        pickCurLocation = "";
        if(pickLocMarker != null){
            pickLocMarker.remove();
            pickLocMarker = null;
        }
        resetMapCameraBound();
    }

    private void resetTVDesLoc(){
        pickLocDesTV.setText(desLocHint);
        pickLocDesTV.setTextColor(Color.parseColor("#66000000"));
        pickDesLocation = "";
        if(desLocMarker != null){
            desLocMarker.remove();
            desLocMarker = null;
        }
        resetMapCameraBound();
    }

    public static float pxFromDp(final Context context, final float dp) {
        return dp * context.getResources().getDisplayMetrics().density;
    }

    @Override
    public boolean onTouch(View v, MotionEvent event) {
        int getId = v.getId();
        switch (getId) {
            case R.id.sendBtn:
                btnEventEff(event, sendBtn, sendBtnText);
                break;
            case R.id.getARideBtn:
                btnEventEff(event, getARideBtn, getARideBtnText);
                break;
            default:
                break;
        }
        return false;
    }

    private void menuOpenBtn() {
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
            navMenuIcon.setBackgroundResource(R.drawable.ic_menu_animatable);
            AnimatedVectorDrawable anim = (AnimatedVectorDrawable) navMenuIcon.getBackground();
            anim.start();
        }
        drawerState = true;
    }

    private void menuCloseBtn() {
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
            navMenuIcon.setBackgroundResource(R.drawable.ic_back_animatable);
            AnimatedVectorDrawable anim = (AnimatedVectorDrawable) navMenuIcon.getBackground();
            anim.start();
        }
        drawerState = false;
    }

    public void btnEventEff(MotionEvent event, View v, TextView tv) {
        if (event.getAction() == MotionEvent.ACTION_DOWN) {
            v.setBackgroundResource(R.color.colorAccent);
            tv.setTextColor(Color.parseColor("#333333"));
        } else if (event.getAction() == MotionEvent.ACTION_UP) {
            v.setBackgroundResource(R.color.colorPrimary);
            tv.setTextColor(Color.parseColor("#ffffff"));
        }
    }

    public void parcelTypeConAnim() {
        if (cameraMove) {
            curLocCont.animate()
                    .translationX(curLocCont.getWidth() / 2)
                    .alpha(0.0f)
                    .setDuration(300);
            selTypeCon.animate()
                    .translationY(selTypeCon.getHeight())
                    .alpha(0.0f)
                    .setDuration(300);
        } else {
            curLocCont.animate()
                    .translationX(0)
                    .alpha(1.0f)
                    .setStartDelay(100)
                    .setDuration(300);
            selTypeCon.animate()
                    .translationY(0)
                    .alpha(1.0f)
                    .setStartDelay(100)
                    .setDuration(300);
        }
    }

    public void animateMarker(final Marker marker, final LatLng toPosition,
                              final boolean hideMarker) {
        final Handler handler = new Handler();
        final long start = SystemClock.uptimeMillis();
        Projection proj = mMap.getProjection();
        Point startPoint = proj.toScreenLocation(marker.getPosition());
        final LatLng startLatLng = proj.fromScreenLocation(startPoint);
        final long duration = 500;

        final Interpolator interpolator = new LinearInterpolator();

        handler.post(new Runnable() {
            @Override
            public void run() {
                long elapsed = SystemClock.uptimeMillis() - start;
                float t = interpolator.getInterpolation((float) elapsed
                        / duration);
                double lng = t * toPosition.longitude + (1 - t)
                        * startLatLng.longitude;
                double lat = t * toPosition.latitude + (1 - t)
                        * startLatLng.latitude;
                marker.setPosition(new LatLng(lat, lng));

                if (t < 1.0) {
                    // Post again 16ms later.
                    handler.postDelayed(this, 16);
                } else {
                    if (hideMarker) {
                        marker.setVisible(false);
                    } else {
                        marker.setVisible(true);
                    }
                }
            }
        });
    }

    private boolean verCheck() {
        if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.M)
            return true;
        return false;
    }

    public boolean permissionCheck() {
        if (verCheck()) {
            int hasFineLocationPermission = checkSelfPermission(Manifest.permission.ACCESS_FINE_LOCATION);
            int hasCoarseLocationPermission = checkSelfPermission(Manifest.permission.ACCESS_COARSE_LOCATION);
            if (hasFineLocationPermission != PackageManager.PERMISSION_GRANTED || hasCoarseLocationPermission != PackageManager.PERMISSION_GRANTED) {
                return false;
            }
        }
        return true;
    }

    private void setPermission() {
        if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.M) {
            requestPermissions(new String[]{android.Manifest.permission.ACCESS_FINE_LOCATION, android.Manifest.permission.ACCESS_COARSE_LOCATION},
                    PERM_REQUEST_LOCATION);
        }
    }

    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {
        switch (requestCode) {
            case PERM_REQUEST_LOCATION:
                if (grantResults.length > 0 && grantResults[0] == PackageManager.PERMISSION_GRANTED && grantResults[1] == PackageManager.PERMISSION_GRANTED) {
                    clientConnect();
                    Toast.makeText(MapActivity.this, "Location Permission Access", Toast.LENGTH_SHORT)
                            .show();
                } else {
                    setPermission();
                    Toast.makeText(MapActivity.this, "Location Permission Denied", Toast.LENGTH_SHORT)
                            .show();
                }

                break;
            default:
                super.onRequestPermissionsResult(requestCode, permissions, grantResults);
        }
    }

    @Override
    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
        if (requestCode == PLACE_AUTOCOMPLETE_CURRENT_REQUEST_CODE || requestCode == PLACE_AUTOCOMPLETE_DESTINATION_REQUEST_CODE) {
            if (resultCode == RESULT_OK) {
                Place place = PlaceAutocomplete.getPlace(this, data);
                if(requestCode == PLACE_AUTOCOMPLETE_CURRENT_REQUEST_CODE){
                    setTVCurLoc(place.getName().toString(), place.getLatLng(), true);
                }else if(requestCode == PLACE_AUTOCOMPLETE_DESTINATION_REQUEST_CODE){
                    setTVDesLoc(place.getName().toString(), place.getLatLng());
                }

            } else if (resultCode == PlaceAutocomplete.RESULT_ERROR) {
                Status status = PlaceAutocomplete.getStatus(this, data);
                Log.i("PlaceAutoCompleteStatus", status.getStatusMessage());

            } else if (resultCode == RESULT_CANCELED) {
                Log.i("PlaceAutoCompleteStatus", "Request Cancel");
            }
        }
    }

    @Override
    public void onConnected(@Nullable Bundle bundle) {
        mapFragment = (MapFragment) getFragmentManager().findFragmentById(R.id.map);
        mapFragment.getMapAsync(this);
    }

    @Override
    public void onConnectionSuspended(int i) {

    }

    @Override
    public void onConnectionFailed(@NonNull ConnectionResult connectionResult) {

    }
}
